{"version":3,"sources":["components/Layout/AdvancedChart/index.js","components/Layout/LiveOrders/index.js","action/liveDataAction.js","components/Layout/LiveTrades/index.js","components/Layout/OrderBook/index.js","components/Layout/Home/index.js"],"names":["AdvancedChart","symbol","theme","Themes","DARK","locale","autosize","interval","connect","state","liveOrders","liveData","dispatch","addLiveOrderData","data","liveOrderData","type","LiveOrderAction","payload","props","useState","setLoading","orders","setOrders","event","channel","subscription","ws","WebSocket","initWebsocket","orderTypes","onopen","send","JSON","stringify","onmessage","response","parse","indexOf","date","Date","parseInt","microtimestamp","getHours","getMinutes","getSeconds","onclose","useEffect","className","map","el","index","style","color","order_type","price","amount","liveTrades","addLiveTradeData","tradeDate","loading","console","log","OrderBook","bids","slice","Math","max","length","asks","sort","a","b","Home"],"mappings":"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","file":"static/js/4.bf2a58a4.chunk.js","sourcesContent":["import React from \"react\";\nimport TradingViewWidget, { Themes } from 'react-tradingview-widget';\n\nconst AdvancedChart = () => {\n\n    \n\n    return(\n        <>\n           <TradingViewWidget\n                symbol=\"BITSTAMP:BTCUSD\"\n                theme={Themes.DARK}\n                locale=\"fr\"\n                autosize\n                interval={15}\n            />\n        </>\n    );\n}\nexport default AdvancedChart;","import React ,{ useEffect,useState } from 'react';\nimport { connect } from \"react-redux\";\nimport { PropTypes } from 'prop-types';\nimport {\n    addLiveOrderData\n  } from '../../../action/liveDataAction'\nfunction LiveOrders(props) {\n\n  const [loading, setLoading] = useState(false);\n  const [orders, setOrders] = useState([]);\n  const [subscription] = useState({\n    event: 'bts:subscribe',\n    data: {\n      channel: 'live_orders_btcusd'\n    }\n  });\n  const ws = new WebSocket('wss://ws.bitstamp.net');\n  const initWebsocket = () => {\n    const orderTypes = ['order_created', 'order_changed', 'order_deleted'];\n    ws.onopen = () => {\n      ws.send(JSON.stringify(subscription));\n    };\n    ws.onmessage = (event) => {\n      if(event.data) {\n        const response = JSON.parse(event.data);\n        setOrders(props.liveOrders);\n        if (orderTypes.indexOf(response.event) !== -1) {\n          const date = new Date(parseInt(response.data.microtimestamp));\n          response.data.microtimestamp = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n          props.addLiveOrderData(response.data);\n          setOrders(props.liveOrders);\n          // setLoading(true);\n        } \n        else if (response.event === 'bts:request_reconnect') {\n            initWebsocket();\n        }\n      }\n      else {\n        setLoading(false);\n\n      }\n    };\n    ws.onclose = () => {\n      initWebsocket();\n    };\n  };\n\n  useEffect(() => {\n    initWebsocket();\n}, [orders ,subscription]);\n\n  return (\n      <div className=\"live-order-data-grid-part\">\n        <table>\n          <thead>\n            <tr>\n              <th>Fiyat(USDT)</th>\n              <th>Miktar(BTC)</th>\n              <th>Saat</th>\n            </tr>\n          </thead>\n          <tbody>\n\n            {\n              \n                orders.map((el, index) => (\n                    <tr key={index}>\n                      <td style={{color: el.order_type === 0 ? 'green' : 'red'}}> {el.price} </td>\n                      <td> {el.amount} </td>\n                      <td> {el.microtimestamp}</td>\n                    </tr>\n                  )) \n              }\n            </tbody>\n        </table>\n      </div>\n  );\n}\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addLiveOrderData: data => dispatch(addLiveOrderData(data))\n    }\n  }\n    const mapStateToProps = (state) => ({\n        liveOrders: state.liveData.liveOrders,\n  });\n\n  LiveOrders.propTypes = {\n    addLiveOrderData: PropTypes.func.isRequired,\n    };\n\n export default connect(mapStateToProps,mapDispatchToProps)(LiveOrders);\n\n","import * as LiveOrderAction from '../types/liveDataType';\n\nexport function addLiveOrderData(liveOrderData) {\n  return {\n    type: LiveOrderAction.ADD_LIVE_ORDER_DATA,\n    payload:liveOrderData\n  };\n}\n\nexport function addLiveTradeData(tradeDate) {\n  return {\n    type: LiveOrderAction.ADD_LIVE_TRADE_DATA,\n    payload:tradeDate\n  };\n}\n\n\n","import React ,{ useEffect,useState } from 'react';\nimport { connect } from \"react-redux\";\nimport { PropTypes } from 'prop-types';\nimport {\n    addLiveTradeData\n  } from '../../../action/liveDataAction';\n\n\nfunction LiveTrades(props) {\n\n  const [loading, setLoading] = useState(false);\n  const [orders, setOrders] = useState([]);\n  const [subscription] = useState({\n    event: 'bts:subscribe',\n    data: {\n      channel: 'live_trades_btcusd'\n    }\n  });\n  const ws = new WebSocket('wss://ws.bitstamp.net');\n  const initWebsocket = () => {\n    ws.onopen = () => {\n      ws.send(JSON.stringify(subscription));\n    };\n    ws.onmessage = (event) => {\n      const response = JSON.parse(event.data);\n      const resData = [];\n      switch (response.event) {\n        case 'trade':\n          if(response.data) {\n            setOrders(resData);\n            const date = new Date(parseInt(response.data.microtimestamp));\n            response.data.microtimestamp = date.getHours() + \":\" + date.getMinutes() + \":\" + date.getSeconds();\n            props.addLiveTradeData(response.data);\n            console.log(props.liveTrades)\n            setOrders(props.liveTrades);\n            setLoading(true);\n          }\n          else {\n            setLoading(false);\n\n          }\n          break;\n        case 'bts:request_reconnect':\n          initWebsocket();\n          break;\n        default:\n          break;\n      }\n    };\n    ws.onclose = () => {\n      initWebsocket();\n    };\n  };\n\n  useEffect(() => {\n    initWebsocket();\n}, [orders ,subscription]);\n\n  return (\n      <div className=\"live-trade-data-grid-part\">\n        <table>\n          <thead>\n            <tr>\n              <th>TÜR</th>\n              <th>Fiyat </th>\n              <th>Miktar(BTC)</th>\n              <th>Saat</th>\n            </tr>\n          </thead>\n          <tbody>\n\n            {\n                loading ?\n                orders.map((el, index) => (\n                    <tr key={index}>\n                      <td style={{color: el.type === 0 ? 'green' : 'red'}}> {el.type === 0 ? 'BUY(BTC)' : 'SELL'} </td>\n                      <td> {el.price} </td>\n                      <td> {el.amount} </td>\n                      <td> {el.microtimestamp}</td>\n                    </tr>\n                  )) : ''\n              }\n            </tbody>\n        </table>\n      </div>\n  );\n}\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addLiveTradeData: data => dispatch(addLiveTradeData(data))\n    }\n  }\n    const mapStateToProps = (state) => ({\n        liveTrades: state.liveData.liveTrades,\n  });\n\n  LiveTrades.propTypes = {\n    addLiveTradeData: PropTypes.func.isRequired,\n    };\n\n export default connect(mapStateToProps,mapDispatchToProps)(LiveTrades);\n\n","import React ,{ useEffect,useState } from 'react';\n\nfunction OrderBook() {\n\n  const [loading, setLoading] = useState(false);\n  const [orders, setOrders] = useState([]);\n  const [subscription] = useState({\n    event: 'bts:subscribe',\n    data: {\n      channel: 'order_book_btcusd'\n    }\n  });\n  const ws = new WebSocket('wss://ws.bitstamp.net');\n  const initWebsocket = () => {\n    ws.onopen = () => {\n      ws.send(JSON.stringify(subscription));\n    };\n    ws.onmessage = (event) => {\n      const response = JSON.parse(event.data);\n      switch (response.event) {\n        case 'data':\n          if(response.data) {\n            response.data.bids = response.data.bids.slice(Math.max(response.data.bids.length - 15, 0));\n            response.data.asks = response.data.asks.slice(Math.max(response.data.asks.length - 15, 0));\n            response.data.asks = response.data.asks.sort((a, b) => a - b);\n            response.data.bids = response.data.bids.sort((a, b) => b - a);\n            console.log(response.data)\n            setOrders(response.data);\n            setLoading(true);\n          }\n          else {\n            setLoading(false);\n\n          }\n          break;\n        case 'bts:request_reconnect':\n          initWebsocket();\n          break;\n        default:\n          break;\n      }\n    };\n    ws.onclose = () => {\n      initWebsocket();\n    };\n  };\n\n  useEffect(() => {\n    initWebsocket();\n}, [orders ,subscription]);\n\n  return (\n      <div className=\"bids-and-ask-data-grid-part\">\n        <table>\n          <thead>\n            <tr>\n              <th>Fiyat(USDT)</th>\n              <th>Miktar(BTC)</th>\n              <th>Toplam</th>\n            </tr>\n          </thead>\n          <tbody>\n\n            {\n                loading ?\n                orders.asks.map((el, index) => (\n                  <tr key={index}>\n                    <td style={{color: 'red'}}> {el[0]} </td>\n                    <td> {el[1]} </td>\n                    <td> {el[0]* el[1]}</td>\n                  </tr>\n                )) : ''\n              }\n            </tbody>\n            <tbody>\n            {\n                loading ?\n                orders.bids.map((el, index) => (\n                  <tr key={index}>\n                    <td style={{color:'green'}}> {el[0]} </td>\n                    <td> {el[1]} </td>\n                    <td> {el[0]* el[1]}</td>\n                  </tr>\n                )) : ''\n              }\n            </tbody>\n        </table>\n        \n      </div>\n  );\n}\n\n\n\nexport default OrderBook;\n","import React from \"react\";\nimport AdvancedChart from \"../AdvancedChart\";\nimport LiveOrders from \"../LiveOrders\";\nimport LiveTrades from \"../LiveTrades\";\nimport OrderBook from \"../OrderBook\";\nfunction Home() {\n\n  return (\n    <>\n      <OrderBook />\n      <div className=\"live-data-full-part\">\n        <div className=\"chart-full-part\">\n          <AdvancedChart />\n          </div>\n          <LiveTrades />\n      </div>\n      <LiveOrders />\n    </>\n  );\n}\n\n\n\nexport default Home;\n"],"sourceRoot":""}